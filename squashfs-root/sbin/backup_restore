###############################
#用户配置备份和备份恢复脚本
###############################

#!/bin/sh
. /lib/functions.sh
. /lib/functions/system.sh
. /lib/upgrade/common.sh

# initialize defaults
RAMFS_COPY_BIN=""	# extra programs for temporary ramfs root
RAMFS_COPY_DATA=""	# extra data files
export MTD_CONFIG_ARGS=""
export INTERACTIVE=0
export VERBOSE=1
export SAVE_CONFIG=1
export SAVE_OVERLAY=0
export DELAY=

export CONF_BACKUP_LIST=0
export CONF_BACKUP=
export CONF_RESTORE=
export NEED_IMAGE=
export HELP=0
export FORCE=0


# parse options
while [ -n "$1" ]; do
	case "$1" in
		-b|--create-backup) export CONF_BACKUP="$2" NEED_IMAGE=1; shift;;
		-r|--restore-backup) export CONF_RESTORE="$2" NEED_IMAGE=1; shift;;
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

export CONFFILES=/tmp/sysupgrade.conffiles
export CONF_TAR=/tmp/sysupgrade.tgz

export ARGV="$*"
export ARGC="$#"

[ -z "$ARGV" -a -z "$NEED_IMAGE" -o $HELP -gt 0 ] && {
	cat <<EOF
Usage: $0 [<upgrade-option>...] <image file or URL>
       $0 [-q] [-i] <backup-command> <file>

backup-command:
	-b | --create-backup <file>
	             create .tar.gz of files specified in sysupgrade.conf
	             then exit. Does not flash an image. If file is '-',
	             i.e. stdout, verbosity is set to 0 (i.e. quiet).
	-r | --restore-backup <file>
	             restore a .tar.gz created with sysupgrade -b
	             then exit. Does not flash an image. If file is '-',
	             the archive is read from stdin.
EOF
	exit 1
}

[ -n "$ARGV" -a -n "$NEED_IMAGE" ] && {
	cat <<-EOF
		-b|--create-backup and -r|--restore-backup do not perform a firmware upgrade.
		Do not specify both -b|-r and a firmware image.
	EOF
	exit 1
}

# prevent messages from clobbering the tarball when using stdout
[ "$CONF_BACKUP" = "-" ] && export VERBOSE=0

#备份overlay下文件
add_overlayfiles() {
	local file="$1"
	find /overlay/etc/ -type f | sed \
		-e 's,^/overlay/,/,' \
		-e '\,/META_[a-zA-Z0-9]*$,d' \
		-e '\,/functions.sh$,d' \
		-e '\,/[^/]*-opkg$,d' \
	> "$file"
	return 0
}

# hooks
sysupgrade_image_check="platform_check_image"
[ $SAVE_OVERLAY = 0 -o ! -d /overlay/etc ] && \
	#sysupgrade_init_conffiles="add_uci_conffiles" || \
	sysupgrade_init_conffiles="add_overlayfiles"



[ "$1" = "nand" ] && nand_upgrade_stage2 $@

do_save_conffiles() {
	local conf_tar="${1:-$CONF_TAR}"

if [ -z "$CONF_BACKUP" ]; then
	platform_config_prepare
fi

	[ -z "$(rootfs_type)" ] && {
		echo "Cannot save config while running from ramdisk."
		ask_bool 0 "Abort" && exit
		return 0
	}
	run_hooks "$CONFFILES" $sysupgrade_init_conffiles
	ask_bool 0 "Edit config file list" && vi "$CONFFILES"

	v "Saving config files..."
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar c${TAR_V}zf "$conf_tar" -T "$CONFFILES"

#########################################
#在备份文件头插入10行，用于版本校验；
#第一行为产品名
#第二行为硬件版本号
#第三行为软件版本号
#4-7行为空行
########################################
if [ -n "$CONF_BACKUP" ]; then
	echo "product=`uci get system.system.hostname`" >> /tmp/backupFile_tmp
	echo "hw_ver=`uci get system.system.hw_ver`" >> /tmp/backupFile_tmp
	echo "fw_ver=`uci get system.system.fw_ver`" >> /tmp/backupFile_tmp
	for i in 4 5 6 7 8 9 10
	do
		echo "" >> /tmp/backupFile_tmp
	done
	cat $conf_tar >> /tmp/backupFile_tmp
	rm -f "$conf_tar"
fi
	encryconfig encrypt /tmp/backupFile_tmp /tmp/backupFile
	rm -f "$CONFFILES"

}

#备份文件
if [ -n "$CONF_BACKUP" ]; then
	do_save_conffiles "$CONF_BACKUP"
	exit $?
fi

#备份恢复
if [ -n "$CONF_RESTORE" ]; then
	if [ "$CONF_RESTORE" != "-" ] && [ ! -f "$CONF_RESTORE" ]; then
		echo "Backup archive '$CONF_RESTORE' not found."
		exit 1
	fi

	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar -C / -x${TAR_V}zf "$CONF_RESTORE"
	exit $?
fi

type platform_check_image >/dev/null 2>/dev/null || {
	echo "Firmware upgrade is not implemented for this platform."
	exit 1
}

for check in $sysupgrade_image_check; do
	( eval "$check \"\$ARGV\"" ) || {
		if [ $FORCE -eq 1 ]; then
			echo "Image check '$check' failed but --force given - will update anyway!"
			break
		else
			echo "Image check '$check' failed."
			exit 1
		fi
	}
done

v "shut down wifi "
wifi down
ifdown -a

#在升级前，去清除watchdog进程
run_hooks "" $sysupgrade_pre_upgrade

#调用注册到ubus进程的system路径下的update方法，
#update方法设置了upgrade_running变量值为1，
#使得在ubus上注册的服务退出时无需等待
ubus call system upgrade

[ -f "/tmp/rebooting" ] && {
	logger "[upgrade]now is in rebooting, exit."
	return 1
}
touch /tmp/sysupgrade
sleep 1
[ -f "/tmp/rebooting" ] && {
	rm -rf /tmp/sysupgrade
	logger "[upgrade]now is in rebooting, exit."
	return 1
}

if [ ! -f /tmp/failsafe ] ; then
	kill_remaining TERM
	sleep 3
	kill_remaining KILL
fi

if [ -n "$(rootfs_type)" ]; then
	v "Switching to ramdisk..."
	run_ramfs '. /lib/functions.sh; include /lib/upgrade; do_upgrade'
else
	do_upgrade
fi
